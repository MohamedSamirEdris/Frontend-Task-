{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nconst initialState = {\n  items: [],\n  status: null\n};\nexport const productsFetch = createAsyncThunk('products/productsFetch', async () => {\n  try {\n    const res = await axios.get('http://demo9849378.mockable.io/products');\n    return res === null || res === void 0 ? void 0 : res.data;\n  } catch (error) {\n    console.log(error);\n  }\n});\nconst productsSlics = createSlice({\n  name: 'products',\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [productsFetch.pending]: (state, action) => {\n      // using lib called immer to update state in new way not the old one need to spreed state then get new one.\n      state.status = 'pending';\n    },\n    [productsFetch.fulfilled]: (state, action) => {\n      state.status = 'success';\n      state.items = action.payload;\n    },\n    [productsFetch.rejected]: (state, action) => {\n      state.status = 'rejected';\n    }\n  }\n});\nexport default productsSlics.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","initialState","items","status","productsFetch","res","get","data","error","console","log","productsSlics","name","reducers","extraReducers","pending","state","action","fulfilled","payload","rejected","reducer"],"sources":["/Users/amrsamir/Desktop/Task/FrontendTask/task/src/redux/productSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\nconst initialState = {\n  items: [],\n  status: null,\n};\n\nexport const productsFetch = createAsyncThunk(\n  'products/productsFetch',\n  async () => {\n    try {\n      const res = await axios.get('http://demo9849378.mockable.io/products');\n      return res?.data;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n);\n\nconst productsSlics = createSlice({\n  name: 'products',\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [productsFetch.pending]: (state, action) => {\n      // using lib called immer to update state in new way not the old one need to spreed state then get new one.\n      state.status = 'pending';\n    },\n    [productsFetch.fulfilled]: (state, action) => {\n      state.status = 'success';\n      state.items = action.payload;\n    },\n    [productsFetch.rejected]: (state, action) => {\n      state.status = 'rejected';\n    },\n  },\n});\n\nexport default productsSlics.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE,EAAE;EACTC,MAAM,EAAE;AACV,CAAC;AAED,OAAO,MAAMC,aAAa,GAAGL,gBAAgB,CAC3C,wBAAwB,EACxB,YAAY;EACV,IAAI;IACF,MAAMM,GAAG,GAAG,MAAML,KAAK,CAACM,GAAG,CAAC,yCAAyC,CAAC;IACtE,OAAOD,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEE,IAAI;EAClB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACpB;AACF,CAAC,CACF;AAED,MAAMG,aAAa,GAAGb,WAAW,CAAC;EAChCc,IAAI,EAAE,UAAU;EAChBX,YAAY;EACZY,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAE;IACb,CAACV,aAAa,CAACW,OAAO,GAAG,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC1C;MACAD,KAAK,CAACb,MAAM,GAAG,SAAS;IAC1B,CAAC;IACD,CAACC,aAAa,CAACc,SAAS,GAAG,CAACF,KAAK,EAAEC,MAAM,KAAK;MAC5CD,KAAK,CAACb,MAAM,GAAG,SAAS;MACxBa,KAAK,CAACd,KAAK,GAAGe,MAAM,CAACE,OAAO;IAC9B,CAAC;IACD,CAACf,aAAa,CAACgB,QAAQ,GAAG,CAACJ,KAAK,EAAEC,MAAM,KAAK;MAC3CD,KAAK,CAACb,MAAM,GAAG,UAAU;IAC3B;EACF;AACF,CAAC,CAAC;AAEF,eAAeQ,aAAa,CAACU,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}